import streamlit as st
import openai
import os
from dotenv import load_dotenv
from gtts import gTTS
import tempfile

# Loading env variables from .env file
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "system", "content": "‡∞Æ‡±Ä‡∞∞‡±Å ‡∞í‡∞ï ‡∞Æ‡±Ü‡∞°‡∞ø‡∞ï‡∞≤‡±ç ‡∞ö‡∞æ‡∞ü‡±ç‡∞¨‡∞æ‡∞ü‡±ç. \n‡∞ö‡∞ø‡∞®‡±ç‡∞® ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø‡∞≤‡∞æ‡∞ï‡±Å ‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£ ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ó‡∞¶‡∞∞‡±ç‡∞∂‡∞ï‡∞≤‡±Å \n‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ï‡∞æ‡∞Ç‡∞ü‡∞∞‡±ç ‡∞™‡±à ‡∞Ö‡∞®‡±ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡∞≤‡±ã ‡∞â‡∞®‡±ç‡∞® ‡∞´‡∞æ‡∞∞‡±ç‡∞Æ‡∞æ‡∞≤‡±Å ‡∞ö‡±Ü‡∞Ø‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞∞‡±Å. \n‡∞ö‡∞ø‡∞µ‡±ç‡∞∞‡∞Æ‡±á‡∞® ‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤‡∞ï‡±Å ‡∞≤‡±à‡∞∏‡±Ü‡∞®‡±ç‡∞∏‡∞ø‡∞°‡±ç ‡∞°‡∞æ‡∞ï‡±ç‡∞ü‡∞∞‡±ç‡∞®‡±Å ‡∞∏‡∞Æ‡±ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞æ‡∞≤‡∞®‡∞ø ‡∞∏‡±Ç‡∞ö‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø."}
    ]

if "last_reply" not in st.session_state:
    st.session_state.last_reply = ""

# Streamlit UI Setup
st.set_page_config(page_title="Telugu Medical Chatbot", page_icon="\U0001F4AC")
st.title("\U0001F310 Telugu Medical Chatbot")
st.markdown("<h3 style='text-align: center; color: #4CAF50;'>‡∞Æ‡±Ä ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞∏‡∞Ç‡∞¶‡±á‡∞π‡∞æ‡∞≤‡∞®‡±Å ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å‡∞≤‡±ã ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø!</h3>", unsafe_allow_html=True)

st.markdown("""
    <style>
    .chat-bubble-user {
        background-color: grey;
        border-radius: 10px;
        padding: 10px;
        margin: 5px;
        text-align: left;
    }
    .chat-bubble-assistant {
        background-color: gray;
        border-radius: 10px;
        padding: 10px;
        margin: 5px;
        text-align: left;
    }
    </style>
""", unsafe_allow_html=True)

for message in st.session_state.messages:
    if message["role"] == "user":
        st.markdown(f"<div class='chat-bubble-user'>\U0001F464 **‡∞Æ‡±Ä‡∞∞‡±Å:** {message['content']}</div>", unsafe_allow_html=True)
    else:
        st.markdown(f"<div class='chat-bubble-assistant'>\U0001F916 **‡∞ö‡∞æ‡∞ü‡±ç‡∞¨‡∞æ‡∞ü‡±ç:** {message['content']}</div>", unsafe_allow_html=True)

# Taking input
user_input = st.text_input("‚úçÔ∏è ‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞®‡±Å ‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø:", value="", key=f"user_input_{len(st.session_state.messages)}")

col1, col2 = st.columns([1, 1])

with col1:
    if st.button("üí¨ ‡∞™‡∞∞‡∞ø‡∞∑‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç ‡∞™‡±ä‡∞Ç‡∞¶‡∞Ç‡∞°‡∞ø") and user_input:
        st.session_state.messages.append({"role": "user", "content": user_input})

        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=st.session_state.messages
            )
            reply = response["choices"][0]["message"]["content"]
            st.session_state.messages.append({"role": "assistant", "content": reply})
            st.session_state.last_reply = reply  # Store last reply

            st.rerun()

        except openai.error.RateLimitError:
            st.error("‚ö†Ô∏è ‡∞Æ‡±Ä ‡∞ï‡±ã‡∞ü‡∞æ ‡∞Æ‡±Å‡∞ó‡∞ø‡∞∏‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞Æ‡∞∞‡∞≤‡∞æ ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø ‡∞≤‡±á‡∞¶‡∞æ ‡∞™‡±ç‡∞≤‡∞æ‡∞®‡±ç‚Äå‡∞®‡±Å ‡∞Ö‡∞™‡±ç‚Äå‡∞ó‡±ç‡∞∞‡±á‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.")
        except Exception as e:
            st.error(f"‚ùå ‡∞≤‡±ã‡∞™‡∞Ç ‡∞µ‡∞ö‡±ç‡∞ö‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞§‡∞∞‡±Å‡∞µ‡∞æ‡∞§ ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø: {e}")

with col2:
    if st.button("üö™ Quit"):
        st.session_state.messages = []
        st.session_state.last_reply = ""
        st.success("üëã ‡∞ö‡∞æ‡∞ü‡±ç ‡∞Æ‡±Å‡∞ó‡∞ø‡∞∏‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞§‡∞ø‡∞∞‡∞ø‡∞ó‡∞ø ‡∞µ‡∞ö‡±ç‡∞ö‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≥‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø!")
        st.stop()

if "last_reply" in st.session_state and st.session_state["last_reply"]:
    if st.button("üîä ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞µ‡∞ø‡∞®‡∞Ç‡∞°‡∞ø"):
        tts = gTTS(text=st.session_state["last_reply"], lang="te")
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as fp:
            tts.save(fp.name)
            st.audio(fp.name, format="audio/mp3")

st.sidebar.title("‚ÑπÔ∏è ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç")
st.sidebar.info(
    "‡∞à ‡∞ö‡∞æ‡∞ü‡±ç‚Äå‡∞¨‡∞æ‡∞ü‡±ç ‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£ ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞∏‡∞≤‡∞π‡∞æ‡∞≤‡∞®‡±Å ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø. ‡∞§‡±Ä‡∞µ‡±ç‡∞∞‡∞Æ‡±à‡∞® ‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤ ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞°‡∞æ‡∞ï‡±ç‡∞ü‡∞∞‡±ç‚Äå‡∞®‡±Å ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.")

st.sidebar.markdown("[GitHub](https://github.com)")

if st.button("üîÑ ‡∞ö‡∞æ‡∞ü‡±ç ‡∞∞‡±Ä‡∞∏‡±Ü‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø"):
    st.session_state.messages = [
        {"role": "system", "content": "‡∞Æ‡±Ä‡∞∞‡±Å ‡∞í‡∞ï ‡∞Æ‡±Ü‡∞°‡∞ø‡∞ï‡∞≤‡±ç ‡∞ö‡∞æ‡∞ü‡±ç‡∞¨‡∞æ‡∞ü‡±ç. \n‡∞ö‡∞ø‡∞®‡±ç‡∞® ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø‡∞≤‡∞æ‡∞ï‡±Å ‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£ ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ó‡∞¶‡∞∞‡±ç‡∞∂‡∞ï‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ï‡±å‡∞Ç‡∞ü‡∞∞‡±ç ‡∞™‡±à ‡∞Ö‡∞®‡±ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡∞≤‡±ã ‡∞â‡∞®‡±ç‡∞® ‡∞´‡∞æ‡∞∞‡±ç‡∞Æ‡∞æ‡∞≤‡±Å ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞∞‡±Å. \n‡∞ö‡∞ø‡∞µ‡±ç‡∞∞‡∞Æ‡±á‡∞® ‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤‡∞ï‡±Å ‡∞≤‡±à‡∞∏‡±Ü‡∞®‡±ç‡∞∏‡∞ø‡∞°‡±ç ‡∞°‡∞æ‡∞ï‡±ç‡∞ü‡∞∞‡±ç‡∞®‡±Å ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞æ‡∞≤‡∞®‡∞ø ‡∞∏‡±Ç‡∞ö‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø."}
    ]
    st.session_state.last_reply = ""
    st.rerun()